{"ast":null,"code":"var _jsxFileName = \"/home/samarth/flask-react-app/reminder/src/components/ToDoItem.js\";\nimport React from 'react';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { Link } from 'react-router-dom'; // import Typography from '@material-ui/core/Typography';\n\nimport { Grid, Paper, Divider, IconButton, Checkbox, List, ListItem, ListItemText, // ListItemIcon,\nListItemSecondaryAction } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ToDoItem = ({\n  taskList,\n  removeTask,\n  completedTask\n}) => {\n  //   console.log(taskList, 'taskList')\n  // handles function from parent component, passes selected taskId back\n  const removeClickHandler = taskId => {\n    removeTask(taskId);\n  };\n\n  const checkHandler = taskId => {\n    completedTask(taskId);\n  };\n\n  if (taskList.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(\"em\", {\n        children: \"You currently have no tasks to do.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 10\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    item: true,\n    xs: 12,\n    md: 12,\n    children: /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 2,\n      children: /*#__PURE__*/_jsxDEV(List, {\n        children: [taskList.map(task => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(ListItem, {\n              alignItems: \"flex-start\",\n              children: [/*#__PURE__*/_jsxDEV(ListItemText, {\n                style: {\n                  wordWrap: 'break-word',\n                  maxWidth: '90%'\n                },\n                primary: task.taskForm.task,\n                secondary: /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    children: [task.taskForm.addNote ? `Additional Notes: ${task.taskForm.addNote}` : null, task.taskForm.addNote ? /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 53,\n                      columnNumber: 50\n                    }, this) : null]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 51,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: task.deadline ? `Complete by: ${new Date(task.deadline).toDateString()}` : null\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 55,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 50,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 46,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(ListItemSecondaryAction, {\n                children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n                  edge: \"end\",\n                  color: \"primary\" //   checked={task.taskId}\n                  ,\n                  onClick: () => checkHandler(task.taskId) // inputProps={{ 'aria-labelledby': labelId }}\n\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 61,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                  edge: \"end\",\n                  \"aria-label\": \"delete\",\n                  onClick: () => removeClickHandler(task.taskId),\n                  children: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 71,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 68,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 15\n            }, this)]\n          }, task.taskId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 15\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/completed-tasks\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              textAlign: 'center'\n            },\n            children: \"See all completed tasks\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\n_c = ToDoItem;\nexport default ToDoItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"ToDoItem\");","map":{"version":3,"sources":["/home/samarth/flask-react-app/reminder/src/components/ToDoItem.js"],"names":["React","DeleteIcon","Link","Grid","Paper","Divider","IconButton","Checkbox","List","ListItem","ListItemText","ListItemSecondaryAction","ToDoItem","taskList","removeTask","completedTask","removeClickHandler","taskId","checkHandler","length","map","task","wordWrap","maxWidth","taskForm","addNote","deadline","Date","toDateString","textAlign"],"mappings":"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","sourcesContent":["import React from 'react';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { Link } from 'react-router-dom';\n// import Typography from '@material-ui/core/Typography';\nimport { \n    Grid, \n    Paper,\n    Divider,\n    IconButton,\n    Checkbox,\n    List,\n    ListItem,\n    ListItemText,\n    // ListItemIcon,\n    ListItemSecondaryAction\n } from '@material-ui/core';\n\n\nconst ToDoItem = ({taskList, removeTask, completedTask}) => {\n    \n//   console.log(taskList, 'taskList')\n  // handles function from parent component, passes selected taskId back\n  const removeClickHandler = (taskId) => {\n    removeTask(taskId);\n  }\n\n  const checkHandler = (taskId) => {\n    completedTask(taskId);\n  }\n\n  if (taskList.length === 0) {\n    return (\n      <p><em>You currently have no tasks to do.</em></p>\n    )\n  }\n  \n  return (\n    <Grid item xs={12} md={12} > \n      <Paper elevation={2}>\n        <List>\n          {taskList.map((task) => {\n            return (\n              <div key={task.taskId}>\n                <ListItem \n                  alignItems=\"flex-start\">\n                  <ListItemText \n                    style={{wordWrap: 'break-word', maxWidth: '90%'}}\n                    primary={task.taskForm.task}\n                    secondary={\n                    <span>\n                      <span>\n                        {task.taskForm.addNote ? (`Additional Notes: ${task.taskForm.addNote}`) : null}\n                        {task.taskForm.addNote ? <br></br> : null}\n                      </span>\n                      <span>\n                        {task.deadline ? `Complete by: ${new Date(task.deadline).toDateString()}` : null}\n                      </span>\n                    </span>\n                  } />\n                <ListItemSecondaryAction>\n                <Checkbox\n                  edge=\"end\"\n                  color=\"primary\"\n                //   checked={task.taskId}\n                  onClick={()=> checkHandler(task.taskId)}\n                // inputProps={{ 'aria-labelledby': labelId }}\n              />\n                  <IconButton edge=\"end\" \n                              aria-label=\"delete\" \n                              onClick={() => removeClickHandler(task.taskId)}>\n                    <DeleteIcon />\n                  </IconButton>\n                </ListItemSecondaryAction>\n              </ListItem>\n              <Divider/>\n            </div>\n            )\n          })}\n          <Link to=\"/completed-tasks\">\n            <p style={{textAlign: 'center'}}>See all completed tasks</p>\n          </Link>\n        </List> \n      </Paper>\n    </Grid>\n  )\n\n}\n\nexport default ToDoItem;\n\n\n"]},"metadata":{},"sourceType":"module"}