{"ast":null,"code":"var _jsxFileName = \"/home/samarth/flask-react-app/reminder/src/components/CompletedTasks.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport BackLink from './BackLink.js'; // import { Link } from 'react-router-dom';\n\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { Grid, Paper, Divider, IconButton, List, ListItem, ListItemText, // ListItemIcon,\nListItemSecondaryAction } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CompletedTasks = () => {\n  _s();\n\n  const [completedList, setCompletedList] = useState([]); //   console.log(completedList, 'completedList')\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await fetch('/completed-tasks');\n      const jsonResponse = await response.json();\n      setCompletedList(jsonResponse);\n    };\n\n    fetchData();\n  }, []);\n\n  const removeClickHandler = async taskId => {\n    // reformat into component since already using in TodoList\n    try {\n      const response = await fetch('/remove-task', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: taskId\n      });\n\n      if (response.ok) {\n        setCompletedList(completedList.filter(task => task.taskId !== taskId));\n      }\n    } catch (error) {\n      console.log(`Error: ${error}`);\n    }\n  };\n\n  if (completedList.length === 0) {\n    return /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      container: true,\n      justify: \"center\",\n      alignItems: \"center\",\n      alignContent: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(BackLink, {\n        selectedLink: '/todo-list'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"em\", {\n          children: \"You have not completed any tasks yet.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 14\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    item: true,\n    xs: 12,\n    md: 12,\n    container: true,\n    justify: \"center\",\n    children: [/*#__PURE__*/_jsxDEV(BackLink, {\n      selectedLink: \"/todo-list\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      container: true,\n      justify: \"center\",\n      alignItems: \"center\",\n      className: \"todo-container\",\n      children: /*#__PURE__*/_jsxDEV(Paper, {\n        elevation: 2,\n        children: /*#__PURE__*/_jsxDEV(List, {\n          children: completedList.map(task => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(ListItem, {\n                alignItems: \"flex-start\",\n                children: [/*#__PURE__*/_jsxDEV(ListItemText, {\n                  style: {\n                    wordWrap: 'break-word',\n                    maxWidth: '90%'\n                  },\n                  primary: task.taskForm.task,\n                  secondary: task.taskForm.addNote ? `Additional Notes: ${task.taskForm.addNote}` : null\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 85,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(ListItemSecondaryAction, {\n                  children: /*#__PURE__*/_jsxDEV(IconButton, {\n                    edge: \"end\",\n                    \"aria-label\": \"delete\",\n                    onClick: () => removeClickHandler(task.taskId),\n                    children: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 95,\n                      columnNumber: 23\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 92,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 91,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 15\n              }, this)]\n            }, task.taskId, true, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 15\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CompletedTasks, \"hWP3UK5vAPwKeSEzLVocf7GpkME=\");\n\n_c = CompletedTasks;\nexport default CompletedTasks;\n\nvar _c;\n\n$RefreshReg$(_c, \"CompletedTasks\");","map":{"version":3,"sources":["/home/samarth/flask-react-app/reminder/src/components/CompletedTasks.js"],"names":["React","useState","useEffect","BackLink","DeleteIcon","Grid","Paper","Divider","IconButton","List","ListItem","ListItemText","ListItemSecondaryAction","CompletedTasks","completedList","setCompletedList","fetchData","response","fetch","jsonResponse","json","removeClickHandler","taskId","method","headers","body","ok","filter","task","error","console","log","length","map","wordWrap","maxWidth","taskForm","addNote"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport BackLink from './BackLink.js';\n// import { Link } from 'react-router-dom';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { \n    Grid, \n    Paper,\n    Divider,\n    IconButton,\n    List,\n    ListItem,\n    ListItemText,\n    // ListItemIcon,\n    ListItemSecondaryAction\n } from '@material-ui/core';\n\n\nconst CompletedTasks = () => {\n\n  const [completedList, setCompletedList] = useState([]);\n//   console.log(completedList, 'completedList')\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await fetch('/completed-tasks');\n      const jsonResponse = await response.json();\n      setCompletedList(jsonResponse);\n    }\n    fetchData();\n  }, []);\n\n\n  const removeClickHandler = async (taskId) => {\n    // reformat into component since already using in TodoList\n    try {\n      const response = await fetch('/remove-task', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: taskId\n      }); \n      if (response.ok) {\n        setCompletedList(completedList.filter(task => task.taskId !== taskId));\n      }\n    } catch (error) {\n        console.log(`Error: ${error}`)\n    }\n  };\n  \n\n  if (completedList.length === 0) {\n    return (\n      <Grid \n        item xs={12}\n        container \n        justify=\"center\"\n        alignItems=\"center\"\n        alignContent=\"center\">\n          <BackLink selectedLink={'/todo-list'} />\n          <p><em>You have not completed any tasks yet.</em></p>\n      </Grid>\n    )\n  }\n  \n\n  return (\n    <Grid \n      item xs={12} md={12}\n      container \n      justify=\"center\">\n      <BackLink selectedLink=\"/todo-list\" />\n      <Grid item xs={12} \n            container \n            justify=\"center\"\n            alignItems=\"center\"\n            className=\"todo-container\">\n      <Paper elevation={2}>\n        <List>\n          {completedList.map((task) => {\n            return (\n              <div key={task.taskId}>\n                <ListItem \n                  alignItems=\"flex-start\">\n                  <ListItemText \n                    style={{wordWrap: 'break-word', maxWidth: '90%'}}\n                    primary={task.taskForm.task}\n                    secondary={task.taskForm.addNote ? \n                        (`Additional Notes: ${task.taskForm.addNote}`) \n                        : null} />\n                  <ListItemSecondaryAction>\n                    <IconButton edge=\"end\" \n                              aria-label=\"delete\" \n                              onClick={() => removeClickHandler(task.taskId)}>\n                      <DeleteIcon />\n                    </IconButton>\n                  </ListItemSecondaryAction>\n                </ListItem>\n              <Divider/>\n            </div>\n            )\n          })}\n        </List> \n      </Paper>\n    </Grid>\n  </Grid>\n  )\n}\n\nexport default CompletedTasks;"]},"metadata":{},"sourceType":"module"}