{"ast":null,"code":"var _jsxFileName = \"/home/samarth/flask-react-app/Task-Tracker/src/components/Login.js\";\nimport React, { useState } from 'react';\nimport { Switch, Redirect } from 'react-router-dom';\nimport { Grid, Button, TextField } from '@material-ui/core';\nimport BackLink from './BackLink.js';\n\nconst Login = () => {\n  const buttonStyle = {\n    backgroundColor: '#ffffff',\n    color: '#808080',\n    margin: '15px 0'\n  }; // set initial state to clear out form if login is unsucessful\n\n  const initialState = {\n    email: '',\n    password: ''\n  };\n  const [loginState, setLoginState] = useState(initialState); // state tracks when login is successful to run TodoList component\n\n  const [loginSuccess, setLoginSuccess] = useState(false);\n\n  const handleChange = evt => setLoginState({ ...loginState,\n    [evt.target.name]: evt.target.value\n  }); // sends and receive data from login route to validate user login\n\n\n  const handleSubmit = evt => {\n    evt.preventDefault(); // console.log(loginState);\n\n    fetch('/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(loginState)\n    }).then(res => {\n      if (!res.ok) {\n        alert('Incorrect Login or Password.'); // param needs to be iterable + clears out form  \n\n        setLoginState({ ...initialState\n        });\n      } else {\n        setLoginSuccess(true);\n      }\n    });\n  }; // remove history b/c it renders twice \n  //   const history = useHistory();\n  //   if (loginSuccess === true) {\n  //     // return <TodoList />\n  //     history.push('/todo-list')\n  //     console.log('Successfully logged in')\n  //   }\n\n\n  if (loginSuccess === true) {\n    return /*#__PURE__*/React.createElement(Switch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 10\n      }\n    }, /*#__PURE__*/React.createElement(Redirect, {\n      to: '/todo-list',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 12\n      }\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(Grid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(BackLink, {\n    selectedLink: '/',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    required: true,\n    id: \"standard-required\",\n    label: \"Email\",\n    name: \"email\",\n    value: loginState.email,\n    onChange: handleChange,\n    style: {\n      margin: '0 5px 0 0'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    required: true,\n    id: \"standard-password-input\",\n    label: \"Password\",\n    type: \"password\",\n    name: \"password\",\n    value: loginState.password,\n    onChange: handleChange,\n    style: {\n      margin: '0 0 0 5px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    style: buttonStyle,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }, \"Submit\"))));\n};\n\nexport default Login;","map":{"version":3,"sources":["/home/samarth/flask-react-app/Task-Tracker/src/components/Login.js"],"names":["React","useState","Switch","Redirect","Grid","Button","TextField","BackLink","Login","buttonStyle","backgroundColor","color","margin","initialState","email","password","loginState","setLoginState","loginSuccess","setLoginSuccess","handleChange","evt","target","name","value","handleSubmit","preventDefault","fetch","method","headers","body","JSON","stringify","then","res","ok","alert"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Switch, Redirect } from 'react-router-dom';\nimport { Grid, Button, TextField } from '@material-ui/core';\nimport BackLink from './BackLink.js';\n\nconst Login = () => {\n  \n  const buttonStyle = {\n    backgroundColor: '#ffffff',\n    color: '#808080',\n    margin: '15px 0'\n  }\n\n  // set initial state to clear out form if login is unsucessful\n  const initialState = {\n    email: '',\n    password: ''\n  }  \n\n  const [loginState, setLoginState] = useState(initialState); \n  \n  // state tracks when login is successful to run TodoList component\n  const [loginSuccess, setLoginSuccess] = useState(false);\n\n  \n  const handleChange = (evt) => setLoginState({\n    ...loginState,\n    [evt.target.name]: evt.target.value\n    }\n  );\n \n  // sends and receive data from login route to validate user login\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n    // console.log(loginState);\n    fetch('/login', {\n          method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(loginState)\n      })\n    .then(res => {\n        if (!(res.ok)) {\n          alert('Incorrect Login or Password.');\n          // param needs to be iterable + clears out form  \n          setLoginState({...initialState})\n        }\n        else {\n          setLoginSuccess(true); \n        }  \n    });  \n  };\n\n// remove history b/c it renders twice \n//   const history = useHistory();\n\n//   if (loginSuccess === true) {\n//     // return <TodoList />\n//     history.push('/todo-list')\n//     console.log('Successfully logged in')\n//   }\n\n     if (loginSuccess === true) {\n       return ( \n         <Switch>\n           <Redirect to={'/todo-list'}/>\n         </Switch>)\n     }    \n\n  return (\n    <Grid>\n      <BackLink selectedLink={'/'} />\n      <Grid>\n        <form onSubmit={handleSubmit}>\n          <div>\n            <TextField \n              required id=\"standard-required\" \n              label=\"Email\" \n              name=\"email\"\n              value={loginState.email}\n              onChange={handleChange}\n              style={{margin: '0 5px 0 0'}}\n            />\n            <TextField\n              required id=\"standard-password-input\"\n              label=\"Password\"\n              type=\"password\"\n              name=\"password\"\n              value={loginState.password}\n              onChange={handleChange}\n              style={{margin: '0 0 0 5px'}}\n            />\n          </div>\n          <Button \n            variant=\"contained\" \n            style={buttonStyle} \n            type=\"submit\">\n              Submit\n          </Button>\n        </form>\n      </Grid>\n    </Grid>\n  )\n};\n\nexport default Login;\n\n"]},"metadata":{},"sourceType":"module"}