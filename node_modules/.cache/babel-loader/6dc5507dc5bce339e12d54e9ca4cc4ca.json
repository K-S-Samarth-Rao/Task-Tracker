{"ast":null,"code":"var _jsxFileName = \"/home/samarth/flask-react-app/Task-Tracker/src/components/TodoList.js\";\nimport React, { useState, useEffect } from 'react';\nimport ToDoItem from './ToDoItem.js';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { Grid, Button, TextField } from '@material-ui/core';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers';\n\nconst TodoList = () => {\n  const buttonStyle = {\n    backgroundColor: '#ffffff',\n    color: '#808080',\n    margin: '15px 0'\n  };\n  const taskInitialState = {\n    task: '',\n    addNote: '',\n    isComplete: false\n  };\n  const [taskList, setTaskList] = useState([]);\n  const [taskForm, setTaskForm] = useState(taskInitialState);\n  const [deadline, setDeadline] = useState(new Date()); // fetch data from server, second arg triggers when to rerun useEffect\n  // fetch + json are async functions\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await fetch('/todo-list');\n      const jsonResponse = await response.json();\n      setTaskList(jsonResponse);\n    };\n\n    fetchData();\n    console.log('fetch: success');\n  }, []);\n\n  const handleChange = evt => setTaskForm({ ...taskForm,\n    [evt.target.name]: evt.target.value\n  });\n\n  const handleDateChange = date => {\n    setDeadline(date);\n  }; // create an async await function \n\n\n  const handleSubmit = async evt => {\n    evt.preventDefault();\n\n    try {\n      const userInput = {\n        taskForm,\n        deadline\n      };\n      const response = await fetch('/todo-list', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userInput)\n      });\n      const jsonResponse = await response.json();\n      userInput['taskId'] = jsonResponse.taskId; // add new task to list of tasks after user submit\n\n      setTaskList(currList => [...currList, userInput]); // add useEffect function here to update component \n    } catch (error) {\n      console.log(`Error: ${error}`);\n    } // reset states after user submits\n\n\n    setTaskForm({ ...taskInitialState\n    });\n    setDeadline(new Date());\n  }; // could be in its own component to reuse w/ completed Task, change fetch route\n\n\n  const removeTask = async taskId => {\n    try {\n      const response = await fetch('/remove-task', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: taskId\n      });\n\n      if (response.ok) {\n        setTaskList(taskList.filter(task => task.taskId !== taskId));\n      }\n    } catch (error) {\n      console.log(`Error: ${error}`);\n    }\n  };\n\n  const completedTask = async taskId => {\n    try {\n      const response = await fetch('/completed-task', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: taskId\n      });\n\n      if (response.ok) {\n        // changes isComplete in task to true\n        // setTaskList(taskList.map((task) => task.taskId === taskId ? ({...task, isComplete : true}) : task));\n        setTaskList(taskList.filter(task => task.taskId !== taskId));\n      }\n    } catch (error) {\n      console.log(`Error: ${error}`);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    container: true,\n    justify: \"center\",\n    alignItems: \"center\",\n    alignContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    required: true,\n    id: \"standard-multiline-flexible\",\n    label: \"Task\",\n    name: \"task\",\n    multiline: true,\n    rowsMax: 4,\n    onChange: handleChange,\n    value: taskForm.task,\n    style: {\n      margin: '0 5px 0 0'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    id: \"standard-multiline-flexible\",\n    label: \"Additional Notes\",\n    name: \"addNote\",\n    multiline: true,\n    rowsMax: 4,\n    onChange: handleChange,\n    value: taskForm.addNote,\n    style: {\n      margin: '0 0 0 5px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(MuiPickersUtilsProvider, {\n    utils: DateFnsUtils,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(KeyboardDatePicker, {\n    margin: \"normal\",\n    id: \"date-picker-dialog\",\n    label: \"Set Deadline\",\n    format: \"MM/dd/yyyy\",\n    value: deadline,\n    onChange: handleDateChange,\n    KeyboardButtonProps: {\n      'aria-label': 'change date'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    style: buttonStyle,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }\n  }, \"Submit\"))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    container: true,\n    justify: \"center\",\n    alignItems: \"center\",\n    className: \"todo-container\",\n    style: {\n      padding: '0 0 15px 0'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ToDoItem, {\n    taskList: taskList,\n    removeTask: removeTask,\n    completedTask: completedTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default TodoList;","map":{"version":3,"sources":["/home/samarth/flask-react-app/Task-Tracker/src/components/TodoList.js"],"names":["React","useState","useEffect","ToDoItem","DateFnsUtils","Grid","Button","TextField","MuiPickersUtilsProvider","KeyboardDatePicker","TodoList","buttonStyle","backgroundColor","color","margin","taskInitialState","task","addNote","isComplete","taskList","setTaskList","taskForm","setTaskForm","deadline","setDeadline","Date","fetchData","response","fetch","jsonResponse","json","console","log","handleChange","evt","target","name","value","handleDateChange","date","handleSubmit","preventDefault","userInput","method","headers","body","JSON","stringify","taskId","currList","error","removeTask","ok","filter","completedTask","padding"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ToDoItem from './ToDoItem.js';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { Grid, Button, TextField } from '@material-ui/core';\nimport {\n    MuiPickersUtilsProvider,\n    KeyboardDatePicker,\n  } from '@material-ui/pickers';\n  \n\nconst TodoList = () => {\n  \n  const buttonStyle = {\n    backgroundColor: '#ffffff',\n    color: '#808080',\n    margin: '15px 0'\n  }\n\n  const taskInitialState = {\n    task: '',\n    addNote: '',\n    isComplete: false\n  }\n\n  const [taskList, setTaskList] = useState([]);\n  const [taskForm, setTaskForm] = useState(taskInitialState);\n  const [deadline, setDeadline] = useState(new Date());\n\n  // fetch data from server, second arg triggers when to rerun useEffect\n  // fetch + json are async functions\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await fetch('/todo-list'); \n      const jsonResponse = await response.json();\n      setTaskList(jsonResponse);\n    } \n    fetchData();\n    console.log('fetch: success');\n  }, []);\n\n\n  const handleChange = (evt) => setTaskForm({\n    ...taskForm,\n    [evt.target.name]: evt.target.value\n    }\n  );\n\n  const handleDateChange = (date) => {   \n    setDeadline(date);\n  };\n\n  // create an async await function \n  const handleSubmit = async (evt) => {\n    evt.preventDefault();\n    try {\n      const userInput = {taskForm, deadline}\n      const response = await fetch('/todo-list', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(userInput)\n      }); \n      const jsonResponse = await response.json();\n      userInput['taskId'] = jsonResponse.taskId\n      // add new task to list of tasks after user submit\n      setTaskList(currList => [...currList, userInput])\n       // add useEffect function here to update component \n    } catch (error) {\n        console.log(`Error: ${error}`)\n    } \n    // reset states after user submits\n    setTaskForm({...taskInitialState})\n    setDeadline(new Date())\n  }\n   \n  // could be in its own component to reuse w/ completed Task, change fetch route\n  const removeTask = async (taskId) => {\n    try {\n      const response = await fetch('/remove-task', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: taskId\n      }); \n      if (response.ok) {\n        setTaskList(taskList.filter(task => task.taskId !== taskId));\n      }\n    } catch (error) {\n        console.log(`Error: ${error}`)\n    }\n  };\n\n  const completedTask = async (taskId) => {\n    try {\n      const response = await fetch('/completed-task', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: taskId\n      }); if (response.ok) {\n        // changes isComplete in task to true\n        // setTaskList(taskList.map((task) => task.taskId === taskId ? ({...task, isComplete : true}) : task));\n            setTaskList(taskList.filter(task => task.taskId !== taskId));\n       }\n    } catch (error) {\n        console.log(`Error: ${error}`)\n     }\n  };\n  \n  return (\n    <Grid container \n          justify=\"center\">\n      <Grid item xs={12}\n            container \n            justify=\"center\"\n            alignItems=\"center\"\n            alignContent=\"center\">\n      <form onSubmit={handleSubmit}>\n        <div>\n          {/* can create 1 TextFieljd to reuse */}\n          <TextField\n            required id=\"standard-multiline-flexible\"\n            label=\"Task\"\n            name=\"task\"\n            multiline\n            rowsMax={4}\n            onChange={handleChange}\n            value={taskForm.task}\n            style={{margin: '0 5px 0 0'}}\n          />\n          <TextField\n            id=\"standard-multiline-flexible\"\n            label=\"Additional Notes\"\n            name=\"addNote\"\n            multiline\n            rowsMax={4}\n            onChange={handleChange}\n            value={taskForm.addNote}\n            style={{margin: '0 0 0 5px'}}\n          />\n        </div>  \n        <div>\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <KeyboardDatePicker\n              margin=\"normal\"\n              id=\"date-picker-dialog\"\n              label=\"Set Deadline\"\n              format=\"MM/dd/yyyy\"\n              value={deadline}\n              onChange={handleDateChange}\n              KeyboardButtonProps={{\n                'aria-label': 'change date',\n              }}\n            />\n          </MuiPickersUtilsProvider>\n        </div>\n        <Button \n          variant=\"contained\" \n          style={buttonStyle} \n          type=\"submit\">\n            Submit\n        </Button>\n      </form>\n      </Grid>\n      {/* <Grid item xs={10}\n            container\n            justify=\"center\">\n        <p style={{textAlign: \"center\"}}>\n          <em>Activate the star icon if you want text reminders. You will receive a\n          text 24 hours before your task is due.</em>\n        </p>         \n      </Grid> */}\n      <Grid item xs={12} \n            container \n            justify=\"center\"\n            alignItems=\"center\"\n            className=\"todo-container\"\n            style={{padding:'0 0 15px 0'}}>\n        <ToDoItem taskList={taskList} \n                  removeTask={removeTask}\n                  completedTask={completedTask} />\n      </Grid>\n    </Grid>\n  );\n}\n    \n\nexport default TodoList;\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}